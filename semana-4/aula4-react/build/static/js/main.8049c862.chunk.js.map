{"version":3,"sources":["components/CriarPost.js","App.js","serviceWorker.js","index.js"],"names":["ContainerFormulario","styled","div","Formulario","Button","button","Input","input","CadaPost","li","TimeLinePost","ul","CriarPost","criarPost","copiaListaDePost","fotoUsuario","state","valorImage","nomeUsuario","valorNome","urlImg","valorUrl","listaDePost","setState","onChangeFotoUsuario","event","target","value","onChangeNomeUsuario","onChangeUrlImg","console","log","this","listaTodosPost","map","post","index","key","type","placeholder","onChange","onClick","Component","App","render","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0pCAIA,IAAMA,EAAsBC,IAAOC,IAAV,KAMnBC,EAAaF,IAAOC,IAAV,KASVE,EAASH,IAAOI,OAAV,KAKNC,EAAQL,IAAOM,MAAV,KAKLC,EAAWP,IAAOQ,GAAV,KASRC,EAAeT,IAAOU,GAAV,KA8FHC,E,YAvFb,aAAe,IAAD,8BACZ,+CASFC,UAAY,WAEV,IAMMC,EAAgB,CANL,CACfC,YAAa,EAAKC,MAAMC,WACxBC,YAAa,EAAKF,MAAMG,UACxBC,OAAQ,EAAKJ,MAAMK,WAGC,mBAAiB,EAAKL,MAAMM,cAElD,EAAKC,SAAS,CACZD,YAAaR,EACbK,UAAW,IACXF,WAAY,IACZI,SAAU,OAxBA,EA4BdG,oBAAsB,SAACC,GACrB,EAAKF,SAAS,CAACN,WAAYQ,EAAMC,OAAOC,SA7B5B,EAgCdC,oBAAsB,SAACH,GACrB,EAAKF,SAAS,CAACJ,UAAWM,EAAMC,OAAOC,SAjC3B,EAoCdE,eAAiB,SAACJ,GAChB,EAAKF,SAAS,CAACF,SAAUI,EAAMC,OAAOC,SAnCtC,EAAKX,MAAQ,CACXG,UAAW,IACXF,WAAY,IACZI,SAAU,IACVC,YAAY,IANF,E,sEAyCZQ,QAAQC,IAAIC,KAAKhB,OACjB,IAAMiB,EAAiBD,KAAKhB,MAAMM,YAAYY,KAAI,SAACC,EAAMC,GACvD,OAAO,kBAAC5B,EAAD,CAAU6B,IAAKD,GAAf,IAAyBD,EAAKjB,YAAciB,EAAKpB,YAAcoB,EAAKf,WAI7E,OACE,kBAACpB,EAAD,KAEE,kBAACG,EAAD,KACI,kDACA,kBAACG,EAAD,CACEgC,KAAK,OACLC,YAAY,qBACZZ,MAASK,KAAKhB,MAAMC,WACpBuB,SAAYR,KAAKR,sBAEnB,kBAAClB,EAAD,CACEgC,KAAK,OACLC,YAAY,qBACZZ,MAASK,KAAKhB,MAAMG,UACpBqB,SAAYR,KAAKJ,sBAEnB,kBAACtB,EAAD,CACEgC,KAAK,OACLC,YAAY,oBACZZ,MAASK,KAAKhB,MAAMK,SACpBmB,SAAYR,KAAKH,iBAGnB,kBAACzB,EAAD,CAAQqC,QAAST,KAAKnB,WAAtB,WAKJ,kBAACH,EAAD,KACGuB,Q,GA/EaS,aCvClBC,E,iLAIF,OACE,6BACE,kBAAC,EAAD,W,GANUD,aAYlBE,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEzBH,QCNKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8049c862.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n\nconst ContainerFormulario = styled.div` \n  display:flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Formulario = styled.div`\n  display:flex;\n  flex-direction: column;\n  width: 300px;\n  height: 200px;\n  align-items: center;\n  border: 1px solid black;\n  justify-content: center;\n`\nconst Button = styled.button`\n  width: 50px;\n  margin-top: 6px;\n`\n\nconst Input = styled.input `\n  margin-top: 3px;\n  width: 200px;\n`\n\nconst CadaPost = styled.li `\n  width: 300px;\n  height: 200px;\n  align-items: center;\n  border: 1px solid black;\n  margin-top: 10px;\n  list-style: none;\n`\n\nconst TimeLinePost = styled.ul `\n  display:flex;\n  flex-direction: column;\n` \n\nclass CriarPost extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      valorNome: ' ',\n      valorImage: ' ',\n      valorUrl: ' ',\n      listaDePost:[]\n    }\n  }\n\n  criarPost = () => {\n    \n    const novoPost = {\n      fotoUsuario: this.state.valorImage,\n      nomeUsuario: this.state.valorNome,\n      urlImg: this.state.valorUrl\n    }\n\n    const copiaListaDePost = [novoPost, ...this.state.listaDePost]\n\n    this.setState({\n      listaDePost: copiaListaDePost,\n      valorNome: ' ',\n      valorImage: ' ',\n      valorUrl: ' '\n    })\n  }\n\n  onChangeFotoUsuario = (event) => {\n    this.setState({valorImage: event.target.value})\n  }\n\n  onChangeNomeUsuario = (event) => {\n    this.setState({valorNome: event.target.value})\n  }\n\n  onChangeUrlImg = (event) => {\n    this.setState({valorUrl: event.target.value})\n  }\n  \n  render() {\n    console.log(this.state)\n    const listaTodosPost = this.state.listaDePost.map((post, index) => {\n      return <CadaPost key={index} > {post.nomeUsuario + post.fotoUsuario + post.urlImg} \n      </CadaPost>\n    })\n\n    return (\n      <ContainerFormulario>\n          \n        <Formulario>\n            <h3>Criar um novo post</h3>\n            <Input\n              type=\"text\" \n              placeholder=\"Foto do Usuário\"\n              value = {this.state.valorImage}\n              onChange = {this.onChangeFotoUsuario}\n            />\n            <Input \n              type=\"text\" \n              placeholder=\"Nome do Usuário\"\n              value = {this.state.valorNome}\n              onChange = {this.onChangeNomeUsuario}\n            />\n            <Input \n              type=\"text\" \n              placeholder=\"URL do Usuário\"\n              value = {this.state.valorUrl}\n              onChange = {this.onChangeUrlImg}\n            />\n\n            <Button onClick={this.criarPost}>\n              Enviar\n            </Button>\n        </Formulario>\n\n        <TimeLinePost>\n          {listaTodosPost}\n        </TimeLinePost>\n\n      </ContainerFormulario>\n    );\n  }\n}\n\n\n\nexport default CriarPost;\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport CriarPost from './components/CriarPost'\n\nclass App extends Component {\n  \n  render() {\n   \n    return (\n      <div>\n        <CriarPost/>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}