{"version":3,"sources":["components/ListaDeTarefas.js","App.js","serviceWorker.js","index.js"],"names":["ItensTarefa","styled","li","ListaDeTarefas","props","criarTarefa","tarefas","cadaTarefa","state","valorTarefa","listaDeTarefas","setState","onChangeTarefa","event","target","value","onChangeTarefaClick","todasTarefas","this","map","tarefa","index","key","type","placeholder","onChange","onClick","React","Component","App","render","document","getElementById","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4VAGA,IAAMA,E,MAAcC,EAAOC,GAAV,KA6FFC,E,YAxFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAqBVC,YAAc,WACX,IAIMC,EAAO,CAJM,CACfC,WAAY,EAAKC,MAAMC,cAGd,mBAAmB,EAAKD,MAAME,iBAE3C,EAAKC,SAAS,CACVD,eAAgBJ,EAChBG,YAAa,OA/BD,EAoCnBG,eAAiB,SAACC,GACd,EAAKF,SAAS,CAACF,YAAaI,EAAMC,OAAOC,SArC1B,EAwCnBC,oBAAsB,WAClB,EAAKL,SAAS,CAAEF,YAAa,OAvC7B,EAAKD,MAAQ,CACTC,YAAa,GACbC,eAAgB,IAJL,E,sEAgDf,IAAMO,EAAeC,KAAKV,MAAME,eAAeS,KAAI,SAACC,EAAQC,GACxD,OAAO,kBAACrB,EAAD,CAAasB,IAAKD,GAAlB,IAA0B,2BAAOE,KAAK,aAAaH,EAAOb,eAIrE,OAEI,6BACI,2CAEA,2BACIgB,KAAK,OACLC,YAAY,cACZT,MAASG,KAAKV,MAAMC,YACpBgB,SAAYP,KAAKN,iBAIrB,4BACIa,SAAUP,KAAKV,MAAMQ,oBACrBU,QAASR,KAAKb,aAFlB,gBAMA,6BAEA,gDAEA,4BACKY,GAGL,6BAEA,0D,GAnFaU,IAAMC,WCH7BC,E,YACJ,WAAYzB,GAAQ,IAAD,8BACjB,4CAAMA,KACDI,MAAQ,GAFI,E,sEASjB,OACE,6BAEE,kBAAC,EAAD,W,GAbUoB,aAqBlBE,iBAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEzBH,QCfKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cbf0fdaa.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ItensTarefa = styled.li`\n    list-style: none;\n`\n\nclass ListaDeTarefas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            valorTarefa: '',\n            listaDeTarefas: [],\n        };  \n    }\n\n    // componentDidMount() {\n    //     const storedState = JSON.parse(window.localStorage.getItem(\"HelloState\"));\n    //     this.setState(storedState);\n    //   }\n    \n    // componentWillUnmount() {\n    //     const stateAsString = JSON.stringify(this.state);\n    //     window.localStorage.setItem(\"HelloState\", stateAsString);\n    // }\n\n    // componentDidUpdate() {\n    //     console.log(\"Fui Atualizado!\");\n    // }\n\n    criarTarefa = () => {\n       const novaTarefa = {\n           cadaTarefa: this.state.valorTarefa,\n       }\n\n       const tarefas = [novaTarefa, ...this.state.listaDeTarefas]\n\n       this.setState({\n           listaDeTarefas: tarefas,\n           valorTarefa: ' ',\n       })\n    }\n\n\n    onChangeTarefa = (event) => {\n        this.setState({valorTarefa: event.target.value})\n    }\n\n    onChangeTarefaClick = () => {\n        this.setState({ valorTarefa: ' '});\n      };\n    \n\n\n    render() {\n\n        const todasTarefas = this.state.listaDeTarefas.map((tarefa, index) => {\n            return <ItensTarefa key={index}> <input type=\"checkbox\"/>{tarefa.cadaTarefa} \n            </ItensTarefa>\n        })\n\n        return (\n\n            <div>\n                <h3>Nova Tarefa</h3>\n\n                <input\n                    type=\"text\" \n                    placeholder=\"Nova Tarefa\"\n                    value = {this.state.valorTarefa}\n                    onChange = {this.onChangeTarefa}\n        \n                />\n\n                <button  \n                    onChange={this.state.onChangeTarefaClick}\n                    onClick={this.criarTarefa}\n                    >Criar Tarefa\n                </button>\n\n                <hr/>\n\n                <h3>Lista de Tarefas</h3>\n\n                <ul>\n                    {todasTarefas}\n                </ul>\n\n                <hr/>\n\n                <h3>Tarefas Conclu√≠das</h3>\n            </div>\n        );\n    }\n}\n\nexport default ListaDeTarefas;","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport ListaDeTarefas from './components/ListaDeTarefas';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n  \n    }\n  }\n  \n  render() {\n\n    return (\n      <div>\n\n        <ListaDeTarefas/>\n\n      </div>\n\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}