{"version":3,"sources":["components/TelaDeCadastro.js","components/TelaListaUsuario.js","App.js","serviceWorker.js","index.js"],"names":["ContainerCadastro","styled","div","InputName","input","InputEmail","ContainerInputsCadastro","ButtonSalvarCadastro","button","TelaDeCadastro","props","salvarAoClicar","data","name","state","inputNome","email","inputEmail","console","log","axios","post","headers","then","window","alert","catch","error","setState","errorMessage","onChangeNome","event","target","value","onChangeEmail","undefined","htmlFor","id","type","this","onChange","onClick","React","Component","ContainerListaUsuario","ItemUsuario","Deletar","TelaListaUsuario","getAllUsers","get","res","listaDeCadastrados","result","deletarUsuario","delete","map","usuario","i","key","ContainerApp","ButtonListaVoltar","App","onClickButtonListaVoltar","paginaAtual","textoButton","render","document","getElementById","Boolean","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5be2d844.chunk.js","sourcesContent":[" \nimport React from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n\nconst ContainerCadastro = styled.div `\n    display: flex;\n    flex-direction: column;\n    border: 1px solid;\n    width: 400px;\n    height: 150px;\n    justify-content: space-around;\n    align-items:center;\n`\nconst InputName = styled.input `\n    width: 60%;\n`\n\nconst InputEmail = styled.input `\n    width: 60%;\n`\nconst ContainerInputsCadastro = styled.div `\n    display: flex;\n`\n\nconst ButtonSalvarCadastro = styled.button `\n     width: 20%;\n     background: #66a0fd;\n     color: white;\n`\n\nclass TelaDeCadastro extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            inputNome: '',\n            inputEmail: '',\n            errorMessage: undefined,\n        }\n    }\n\n    // alertaInputEmBarco = () => {\n    //     if((this.state.inputNome === \" \") && (this.state.inputEmail === \" \")){\n    //         window.alert(\"Preencha o campo nome e email\")\n    //     }\n    // }\n\n    salvarAoClicar = () => {\n   \n        const data = {\n          name: this.state.inputNome,\n          email: this.state.inputEmail,\n        }\n        console.log(data)\n        axios.post(\n          \"https://us-central1-future4-users.cloudfunctions.net/api/users/createUser\",\n          data,\n          {\n            headers: {\n              \"api-token\": \"59b24f3229f4bbf3c49cea1e9c5fc609\"\n            }\n          }\n        ).then(() => {\n          window.alert(\"Usuário salvo com sucesso!\")\n        })\n        .catch(error => {\n            console.log(error);\n            this.setState({\n                errorMessage:\n                \"Ocorreu um erro! Atualize a página para tentar novamente!\"\n            });\n        });\n    }\n    \n    onChangeNome = (event) => {\n      this.setState({inputNome: event.target.value})\n    }\n  \n    onChangeEmail = (event) => {\n      this.setState({inputEmail: event.target.value})\n    }\n  \n    render() {\n\n        return(\n            <ContainerCadastro>\n\n                <ContainerInputsCadastro>\n\n                    <label htmlFor=\"nome\">Nome:</label>\n\n                    <InputName\n                        id=\"nome\"\n                        type=\"text\"\n                        value={this.state.name}\n                        onChange={this.onChangeNome}\n                    />\n\n                </ContainerInputsCadastro>\n\n                <ContainerInputsCadastro>\n                    \n                    <label htmlFor=\"email\">E-mail:</label>\n\n                    <InputEmail\n                        id=\"email\"\n                        type=\"email\"\n                        value={this.state.email}\n                        onChange={this.onChangeEmail}\n                    />\n\n                </ContainerInputsCadastro>\n            \n\n                <ButtonSalvarCadastro onClick={this.salvarAoClicar} >Salvar</ButtonSalvarCadastro>\n\n            </ContainerCadastro>\n        );\n    }\n}\n\n\nexport default TelaDeCadastro;\n","import React, { Component } from 'react'\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n\nconst ContainerListaUsuario = styled.div `\n    display:flex;\n    flex-direction: column;\n`\nconst ItemUsuario = styled.div `\n    display:flex;\n    align-items: center;\n    justify-content: space-between;\n`\n\nconst Deletar = styled.div `\n    color: red;\n`\nclass TelaListaUsuario extends React .Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            listaDeCadastrados: [],\n            errorMessage: undefined,\n        }\n    }\n\n\n    getAllUsers = () => {\n        axios\n        .get(\"https://us-central1-future4-users.cloudfunctions.net/api/users/getAllUsers\",\n            {\n                headers: {\n                    \"api-token\": \"59b24f3229f4bbf3c49cea1e9c5fc609\"\n                }\n            }\n        ).then((res) => {\n            this.setState({\n                listaDeCadastrados: res.data.result\n            })\n            console.log(res.data)\n        })\n        .catch(error => {\n            console.log(error);\n            this.setState({\n                errorMessage:\n                \"Ocorreu um erro! Atualize a página para tentar novamente!\"\n            });\n        });\n    }\n       \n\n    componentDidMount() {\n      this.getAllUsers()\n    }\n\n    deletarUsuario = (id) => {\n        axios\n            .delete(`https://us-central1-future4-users.cloudfunctions.net/api/users/deleteUser?id=${id}`,\n                {\n                    headers: {\n                        \"api-token\": \"59b24f3229f4bbf3c49cea1e9c5fc609\"\n                    }\n                }\n            )\n            .then(() => {\n                this.getAllUsers()\n            })\n    }\n\n    render() {\n    \n        return (\n\n            <ContainerListaUsuario>\n                <h3>Usuários Cadastrados</h3>\n\n                {\n                    this.state.listaDeCadastrados.map((usuario, i) => {\n                        return (\n                            <ItemUsuario key={ i }>\n                                <p>{ usuario.name }</p>\n                                <Deletar onClick = { () => {this.deletarUsuario(usuario.id)}}> X </Deletar>\n                            </ItemUsuario>\n                        )\n                    })\n                }\n            </ContainerListaUsuario>\n        );\n    }\n}\n\n\nexport default TelaListaUsuario;","import React, {Component} from 'react';\nimport {render} from 'react-dom';\nimport axios from 'axios';\nimport styled from 'styled-components'\nimport TelaDeCadastro from './components/TelaDeCadastro';\nimport TelaListaUsuario from './components/TelaListaUsuario';\n\nconst ContainerApp = styled.div `\n  display: flex;\n  align-items:center;\n  flex-direction: column;\n`\n\nconst ButtonListaVoltar = styled.button `\n  width:10%;\n`\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      paginaAtual: \"telaCadastro\",\n      textoButton: \"Lista de Usuários\"\n    }\n  }\n\n  onClickButtonListaVoltar = () =>  {\n    if(this.state.paginaAtual === \"telaCadastro\") {\n      this.setState({\n        paginaAtual: \"listaUsuario\",\n        textoButton: \"Voltar\"\n      })\n    } else {\n      this.setState({\n        paginaAtual: \"telaCadastro\",\n        textoButton: \"Lista de Usuários\"\n      })\n    }\n  }\n\n  render() {\n \n\n    return(\n      <ContainerApp>\n        {\n          this.state.paginaAtual === \"telaCadastro\" ? <TelaDeCadastro/> : <TelaListaUsuario/>\n        }\n\n        <ButtonListaVoltar onClick = {this.onClickButtonListaVoltar}>{this.state.textoButton}</ButtonListaVoltar>\n      </ContainerApp>\n    )\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}